Goal:
    assign thread reference to all variable and functionCall in expressions.
    record info upon AST nodes.

Requirement:
    1. function call support forward reference -- function should be collected before threading.
    2. field and method in class support forward reference -- field and method should be collected before threading memebers in class.
    3. class should be collected before threading.

Strategy:
    separate out declaration and usage in expression.
    be patient, use multiple passes.

Implementation:
    1. class should be collected first. (function and field can't be collected because of forward reference of class).
    2. function (returnType) + dynamic variable lookup.
    (variable can't be checked statically, because their declarations nest with each other. The only thing needs attention
        is class field threading. We need thread all field at first, then continue checking.)


Pitfalls:
    1. array and string have built-in methods.
    2. binary expression's acceptable operator type and result type could be complicated.
    3. string has overloaded 'plus' operator for concatenation.
    4. void type can't be declared (maybe also cannot be created).
    5. null can't assign int, bool, string.
    6. return; return null; mean the same thing.
    7. main function always needs to be present, and its return type should be integer.
    8. variable name shouldn't be duplicated.
    9. continue and break need to stay in loops.
    10. return properly. don't care about loops.
    11. new int[][4] is wrong. check in format check.
    12. check existing VarTypeRef instead of being threaded later. such as the returnType of functions, and the declaration type.
    13. check assignable for creation initialization.
    14. array index needs to be integer type.
    15. class b{
            int b() {
                this.a = a;
            }
            int a;
        }
    16. void returnType is incompatible for 'return null;'
    17. prefix expression is left value, while suffix is right value.
    18. class, function, variable's names can't be the same under the same scope.
    19. errorListener needs to be added explicitly to raise exception during antlr syntactic check phase.
